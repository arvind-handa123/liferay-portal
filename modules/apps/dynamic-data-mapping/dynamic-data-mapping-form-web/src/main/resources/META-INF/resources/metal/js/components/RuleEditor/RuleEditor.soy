{namespace RuleEditor}

/**
 * Prints the DDM rule settings.
 */
{template .render}
	{@param conditions: list<[
			operator: string,
			operands: list<[
				type: string,
				label: string,
				value: string
			]>
		]>
	}
	{@param firstOperandList : list<[
			value: string,
			type: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>
		]>
	}
	{@param fixedOptions : list<[
			value: string,
			type: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>
		]>
	}
	{@param logicalOperator: string}
	{@param readOnly: bool}
	{@param strings: ?}
	{@param visibleModal: bool}
	{@param? _handleAddNewCondition: any}
	{@param? _handleDeleteCondition: any}
	{@param? _handleFirstOperandSelection: any}
	{@param? _handleLogicalOperationChange: any}
	{@param? _handleOperatorSelection: any}
	{@param? _handleSecondOperandSelection: any}
	{@param? _handleTypeSelection: any}
	{@param? _handleModalButtonClicked: any}
	{@param? operatorsList: list<[
			operator: list<[
				value: string,
				name: string,
				parameterTypes: list<string>,
				returnType: string
			]>
		]>
	}
	{@param? roles: list<[
			name: string,
			id: string
		]>
	}
	{@param? secondOperandTypeList: list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList: list<[
			id: string,
			value: string,
			name: string
		]>
	}
	{@param? spritemap: string}
	<div class="form-builder-rule-builder liferay-ddm-form-builder-rule-builder-content">
		<h2 class="form-builder-section-title text-default">{$strings.title}</h2>
		<h4 class="text-default">{$strings.description}</h4>
		<ul class="liferay-ddm-form-builder-rule-condition-list liferay-ddm-form-rule-builder-timeline timeline {length($conditions) > 1 ? 'can-remove-item' : ''}">
			{let $enableLogicalOperator: (length($conditions) > 1) ? true : false /}
			{call .rulesHeader}
				{param extraContent kind="html"}
					{call .logicalOperatorDropDown}
						{param _handleLogicalOperationChange: $_handleLogicalOperationChange /}
						{param enableLogicalOperator: $enableLogicalOperator /}
						{param logicalOperator: $strings[$logicalOperator] /}
						{param strings: $strings /}
					{/call}
				{/param}
				{param logicalOperator: $strings[$logicalOperator] /}
				{param title: $strings.condition /}
			{/call}
			{foreach $condition in $conditions}
				{call .condition}
					{param _handleDeleteCondition: $_handleDeleteCondition /}
					{param _handleFirstOperandSelection: $_handleFirstOperandSelection /}
					{param _handleOperatorSelection: $_handleOperatorSelection /}
					{param _handleSecondOperandSelection: $_handleSecondOperandSelection /}
					{param _handleTypeSelection: $_handleTypeSelection /}
					{param chooseAnOption: $strings.chooseAnOption /}
					{param firstOperandList: $firstOperandList /}
					{param firstOperandTypeSelected: $condition.operands[0].type /}
					{param firstOperandValueSelected: $condition.operands[0].value /}
					{param fixedOptions: $fixedOptions /}
					{param if: $strings.if /}
					{param index: index($condition) /}
					{param logicalOperator: $strings[$logicalOperator] /}
					{param operatorSelected: $condition.operator /}
					{param operators: isNonnull($operatorsList) and length($operatorsList) > 0 and isNonnull($operatorsList[index($condition)]) ? $operatorsList[index($condition)].operator : null  /}
					{param readOnly: $readOnly /}
					{param roles: $roles /}
					{param secondOperandTypeList: $secondOperandTypeList /}
					{param secondOperandTypeName: '' /}
					{param secondOperandTypeSelected: $condition.operands[0].type /}
					{param secondOperandTypeSelectedList: $secondOperandTypeSelectedList /}
					{param secondOperandTypeValue: isNonnull($condition.operands[1]) ? $condition.operands[1].value : '' /}
					{param spritemap: $spritemap /}
				{/call}
				{ifempty}
					{call .condition}
						{param _handleDeleteCondition: $_handleDeleteCondition /}
						{param _handleFirstOperandSelection: $_handleFirstOperandSelection /}
						{param _handleOperatorSelection: $_handleOperatorSelection /}
						{param _handleSecondOperandSelection: $_handleSecondOperandSelection /}
						{param _handleTypeSelection: $_handleTypeSelection /}
						{param chooseAnOption: $strings.chooseAnOption /}
						{param firstOperandList: $firstOperandList /}
						{param fixedOptions: $fixedOptions /}
						{param if: $strings.if /}
						{param index: 0 /}
						{param logicalOperator: $strings[$logicalOperator] /}
						{param operators: isNonnull($operatorsList) and length($operatorsList) > 0 and isNonnull($operatorsList[0]) ? $operatorsList[0].operator : null /}
						{param readOnly: $readOnly /}
						{param roles: $roles /}
						{param secondOperandTypeList: $secondOperandTypeList /}
						{param secondOperandTypeName: '' /}
						{param spritemap: $spritemap /}
					{/call}
			{/foreach}
		</ul>
		{call .btnAddNewTimelineItem}
			{param _handleAddNewCondition: $_handleAddNewCondition /}
			{param spritemap: $spritemap /}
		{/call}
		{call ClayModal.render}
			{param body kind="html"}
				<h4>{$strings.deleteConditionQuestion}</h4>
			{/param}
			{param events: [
				'clickButton': $_handleModalButtonClicked
			]/}
			{param footerButtons: [
				[
					'alignment': 'right',
					'label':'dismiss',
					'style': 'primary',
					'type': 'close'
				],
				[
					'alignment': 'right',
					'label': 'delete',
					'style': 'primary',
					'type': 'button'
				]
			] /}
			{param size: 'sm' /}
			{param spritemap: $spritemap /}
			{param title: $strings.deleteCondition /}
			{param visible: $visibleModal /}
		{/call}
	</div>
{/template}
{template .condition}
	{@param firstOperandList : list<[
			value: string,
			type: string,
			name: string,
			options: list<[
				label: string,
				value: string
			]>
		]>
	}
	{@param if: string}
	{@param index: int}
	{@param readOnly: bool}
	{@param? secondOperandTypeList : list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList : list<[
			id: string,
			value: string,
			name: string
		]>
	}
	{@param? _handleDeleteCondition: any}
	{@param? _handleFirstOperandSelection: any}
	{@param? _handleOperatorSelection: any}
	{@param? _handleSecondOperandSelection: any}
	{@param? _handleTypeSelection: any}
	{@param? chooseAnOption: string}
	{@param? firstOperandTypeSelected: string}
	{@param? firstOperandValueSelected: string}
	{@param? fixedOptions: any}
	{@param? logicalOperator: string}
	{@param? operatorSelected: string}
	{@param? operators:  list<[
			value: string,
			name: string,
			parameterTypes: list<string>,
			returnType: string
		]>
	}
	{@param? roles: list<[
			name: string,
			id: string
		]>
	}
	{@param? secondOperandTypeName: string }
	{@param? secondOperandTypeValue: any }
	{@param? spritemap: string}
	<li class="form-builder-rule-condition-container timeline-item" condition-index="{$index}">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="form-group-autofit">
					<div class="form-group-item form-group-item-label form-group-item-shrink">
						<h4>
							<span class="text-truncate-inline">
								<span class="text-truncate">{$if}</span>
							</span>
						</h4>
					</div>
					<div class="condition-if form-group-item" condition-if-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'select'"}
							{param events: [
								'fieldEdited': $_handleFirstOperandSelection
							] /}
							{param fixedOptions: $fixedOptions /}
							{param options: $firstOperandList /}
							{param placeholder: $chooseAnOption /}
							{param ref: 'conditionIf' + $index /}
							{param spritemap: $spritemap /}
							{param value: [$firstOperandValueSelected]   /}
						{/delcall}
					</div>
					{call .operators}
						{param _handleOperatorSelection: $_handleOperatorSelection /}
						{param chooseAnOption: $chooseAnOption /}
						{param firstOperandTypeSelected: $firstOperandTypeSelected /}
						{param index: $index /}
						{param operatorSelected: $operatorSelected /}
						{param operators: $operators /}
						{param spritemap: $spritemap /}
					{/call}
					{if $firstOperandTypeSelected != 'user'}
						{call .secondOperandTypeList}
							{param _handleTypeSelection: $_handleTypeSelection /}
							{param chooseAnOption: $chooseAnOption /}
							{param index: $index /}
							{param operatorSelected: $operatorSelected /}
							{param secondOperandTypeList: $secondOperandTypeList /}
							{param secondOperandTypeSelectedList: $secondOperandTypeSelectedList /}
							{param spritemap: $spritemap /}
						{/call}
					{else}
						{call .rolesList}
							{param _handleSecondOperandSelection: $_handleSecondOperandSelection /}
							{param chooseAnOption: $chooseAnOption /}
							{param index: $index /}
							{param operatorSelected: $operatorSelected /}
							{param roles: $roles  /}
							{param secondOperandTypeValue: $secondOperandTypeValue /}
							{param spritemap: $spritemap /}
						{/call}
					{/if}
					{let $visibleTextField: (isNonnull($secondOperandTypeSelectedList) and length($secondOperandTypeSelectedList) > 0) and isNull($secondOperandTypeSelectedList[$index].name) and ($firstOperandTypeSelected == 'text') ? true : false /}
					<div class="condition-type-value form-group-item {if not $visibleTextField}hide{/if}" condition-type-value-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'text'"}
							{param events: [
								'fieldEdited': $_handleSecondOperandSelection
							] /}
							{param name: $secondOperandTypeName /}
							{param readOnly: $readOnly /}
							{param ref: 'typeValueInput' + $index /}
							{param spritemap: $spritemap /}
							{param value: $secondOperandTypeValue /}
						{/delcall}
					</div>
					{let $visibleDateField: (isNonnull($secondOperandTypeSelectedList) and length($secondOperandTypeSelectedList) > 0) and isNull($secondOperandTypeSelectedList[$index].name) and ($firstOperandTypeSelected == 'date') ? true : false /}
					<div class="condition-type-value-date form-group-item {if not $visibleDateField}hide{/if}" condition-type-value-date-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'date'"}
							{param events: [
								'fieldEdited': $_handleSecondOperandSelection
							] /}
							{param name: $secondOperandTypeName /}
							{param readOnly: $readOnly /}
							{param ref: 'typeValueDate' + $index /}
							{param spritemap: $spritemap /}
							{param value: $secondOperandTypeValue /}
						{/delcall}
					</div>
					{let $visibleSelectField: (isNonnull($secondOperandTypeSelectedList) and length($secondOperandTypeSelectedList) > 0) and ($secondOperandTypeSelectedList[$index].name == 'field') ? true : false /}
					<div class="condition-type-value-select form-group-item {if not $visibleSelectField}hide{/if}" condition-type-value-select-index="{$index}">
						{delcall PageRenderer.RegisterFieldType variant="'select'"}
							{param events: [
									'fieldEdited': $_handleSecondOperandSelection
								] /}
							{param options: $firstOperandList /}
							{param placeholder: $chooseAnOption /}
							{param ref: 'typeValueSelect' + $index /}
							{param spritemap: $spritemap /}
							{param value: [$secondOperandTypeValue] /}
						{/delcall}
					</div>
					{let $fieldHasOptions:
						(isNonnull($secondOperandTypeSelectedList) and length($secondOperandTypeSelectedList) > 0 and isNull($secondOperandTypeSelectedList[$index].name)) and
						($firstOperandTypeSelected == 'select' or
						$firstOperandTypeSelected == 'checkbox_multiple' or
						$firstOperandTypeSelected == 'radio')
					/}
					{let $visibleSelectOptionsField: $fieldHasOptions ? true : false /}
					{foreach $operand in $firstOperandList}
						{if $operand.value == $firstOperandValueSelected}
							<div class="condition-type-value-select-options form-group-item {if not $visibleSelectOptionsField}hide{/if}" condition-type-value-select-options-index="{$index}">
								{delcall PageRenderer.RegisterFieldType variant="'select'"}
									{param events: [
										'fieldEdited': $_handleSecondOperandSelection
									] /}
									{param options: $operand.options /}
									{param placeholder: $chooseAnOption /}
									{param ref: 'typeValueSelectOptions' + $index /}
									{param spritemap: $spritemap /}
									{param value: [$secondOperandTypeValue] /}
								{/delcall}
							</div>
						{/if}
					{/foreach}
				</div>
				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>
		<div class="operator panel panel-default panel-inline">
			<div class="panel-body text-uppercase">{$logicalOperator}</div>
		</div>
		<div class="container-trash">
			{call ClayButton.render}
				{param events: [
					'click': $_handleDeleteCondition
				] /}
				{param data: ['index': $index] /}
				{param icon: 'trash' /}
				{param monospaced: true /}
				{param ref: 'trashButton' + $index /}
				{param size: 'sm' /}
				{param spritemap: $spritemap /}
				{param style: 'secondary' /}
			{/call}
		</div>
	</li>
{/template}
{template .operators}
	{@param index: int}
	{@param? chooseAnOption: string}
	{@param? _handleOperatorSelection: any}
	{@param? firstOperandTypeSelected: string}
	{@param? operatorSelected: string}
	{@param? operators:  list<[
			value: string,
			name: string,
			parameterTypes: list<string>,
			returnType: string
		]>
	}
	{@param? spritemap: string}
	{let $readOnly: $firstOperandTypeSelected ? false : true /}
	<div class="condition-operator form-group-item" condition-operator-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleOperatorSelection
			] /}
			{param options: $operators /}
			{param placeholder: $chooseAnOption /}
			{param readOnly: $readOnly /}
			{param ref: 'conditionOperator' + $index /}
			{param spritemap: $spritemap /}
			{param value: [$operatorSelected] /}
		{/delcall}
	</div>
{/template}
 {template .secondOperandTypeList}
	{@param index: int}
	{@param? _handleTypeSelection: any}
	{@param? chooseAnOption: string}
	{@param? operatorSelected: any}
	{@param? secondOperandTypeList : list<[
			value: string,
			name: string
		]>
	}
	{@param? secondOperandTypeSelectedList : list<[
			id: string,
			value: string,
			name: string
		]>
	}
	{@param? spritemap: string}
	{let $visible: $operatorSelected and isNonnull($secondOperandTypeSelectedList) and $secondOperandTypeSelectedList[$index].name != 'none' ? true: false /}
	<div class="condition-type form-group-item {if not $visible}hide{/if}" condition-type-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleTypeSelection
			] /}
			{param options: $secondOperandTypeList /}
			{param placeholder: $chooseAnOption /}
			{param ref: 'type' + $index /}
			{param spritemap: $spritemap /}
			{param value: (isNonnull($secondOperandTypeSelectedList) and length($secondOperandTypeSelectedList) > 0) ? $secondOperandTypeSelectedList[$index].value : ''/}
		{/delcall}
	</div>
{/template}
{template .rolesList}
	{@param index: int}
	{@param? _handleSecondOperandSelection: any}
	{@param? chooseAnOption: string}
	{@param? operatorSelected: any}
	{@param? roles: list<[
			name: string,
			id: string
		]>
	}
	{@param? secondOperandTypeValue: any }
	{@param? spritemap: string}
	{let $visible: $operatorSelected ? true: false /}
	<div class="condition-user-role form-group-item {if not $visible}hide{/if}" condition-user-role-index="{$index}">
		{delcall PageRenderer.RegisterFieldType variant="'select'"}
			{param events: [
				'fieldEdited': $_handleSecondOperandSelection
			] /}
			{param options: $roles /}
			{param placeholder: $chooseAnOption /}
			{param spritemap: $spritemap /}
			{param value: [$secondOperandTypeValue] /}
		{/delcall}
	</div>
{/template}
 /**
 * Prints Logical Operator Dropdown
 */
{template .logicalOperatorDropDown}
	{@param strings: ?}
	{@param _handleLogicalOperationChange: any}
	{@param? enableLogicalOperator: bool}
	{@param? logicalOperator: string}
	{let $attributes kind="attributes"}
		class="btn btn-default dropdown-toggle dropdown-toggle-operator text-uppercase"
		data-toggle="dropdown"
		type="button"
		{if not $enableLogicalOperator}
			disabled
		{/if}
	{/let}
	<div class="btn-group dropdown" style="block">
		<button {$attributes}>
			<span class="dropdown-toggle-selected-value">{$logicalOperator}</span> <span class="caret"></span>
		</button>
		<ul class="dropdown-menu" data-onclick={$_handleLogicalOperationChange}>
			<li class="logic-operator text-uppercase" data-logical-operator-value="or"><a>{$strings['or']}</a></li>
			<li class="divider"></li>
			<li class="logic-operator text-uppercase" data-logical-operator-value="and"><a>{$strings['and']}</a></li>
		</ul>
	</div>
{/template}
 /**
 * Prints rules header.
 */
{template .rulesHeader}
	{@param title: string}
	{@param? extraContent: html}
	<li class="timeline-item">
		<div class="panel panel-default">
			<div class="flex-container panel-body">
				<div class="h4 panel-title">
					{$title}
				</div>
				{if $extraContent}
					{$extraContent}
				{/if}
				<div class="timeline-increment">
					<span class="timeline-icon"></span>
				</div>
			</div>
		</div>
	</li>
{/template}
 /**
 * Prints the DDM rule condition.
 */
{template .btnAddNewTimelineItem}
	{@param? _handleAddNewCondition: any}
	{@param? spritemap: string}
	<div class="addbutton-timeline-item">
		<div class="add-condition timeline-increment-icon">
			{call ClayButton.render}
				{param events: [
					'click': $_handleAddNewCondition
				] /}
				{param elementClasses: 'rounded-circle' /}
				{param icon: 'plus' /}
				{param monospaced: true /}
				{param ref: 'addNewCondition' /}
				{param size: 'sm' /}
				{param spritemap: $spritemap /}
			{/call}
		</div>
	</div>
{/template}